#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"
require "dorian/to_struct"
require "json"

def deep_pluck(json, &block)
  if json.is_a?(Hash)
    results = json.map do |key, value|
      [
        deep_pluck(key, &block),
        deep_pluck(value, &block)
      ]
    end.flatten(1)

    results << yield(json)

    if results.compact.empty?
      nil
    else
      results.compact
    end
  elsif json.is_a?(Array)
    results = json.map do |element|
      deep_pluck(element, &block)
    end

    results << yield(json)

    if results.compact.empty?
      nil
    else
      results.compact
    end
  else
    nil
  end
end

parsed =
  Dorian::Arguments.parse(
    json: {
      alias: :j
    },
    ruby: {
      alias: :r
    },
    version: {
      alias: :v
    },
    help: {
      alias: :h
    }
  )

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

inputs = parsed.files.map { |file| File.read(file) }
inputs = [$stdin.each_line.to_a.map(&:strip).join("\n")] if inputs.empty?
keys = parsed.arguments.map do |key|
  key.to_i.to_s == key ? key.to_i : key
end

inputs.each do |input|
  result = deep_pluck(JSON.parse(input)) do |json|
    json.is_a?(Hash) || json.is_a?(Array) ? json.dig(*keys) : nil
  rescue TypeError
    nil
  end

  if parsed.options.json
    puts JSON.pretty_generate(result)
  elsif parsed.options.ruby
    p result
  else
    puts result
  end
end
